# web容器端口
server.port=8443

# 开启HTTP响应压缩
server.compression.enabled=true

# 开启HTTP2
server.http2.enabled=true

# HTTPS-证书的路径.
server.ssl.key-store=classpath:keystore.p12

# HTTPS-证书密码，请修改为您自己证书的密码.
server.ssl.key-store-password=123123

# HTTPS-秘钥库类型
server.ssl.keyStoreType=PKCS12

# HTTPS-证书别名
server.ssl.keyAlias=spring-boot-example

# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
# 不要设置过大，如果过大，启动项目会报错：打开文件数过多
server.undertow.io-threads=16

# 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
# 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
server.undertow.worker-threads=256

# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
server.undertow.buffer-size=1024

# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#server.undertow.buffers-per-region=1024

# 是否分配的直接内存(NIO直接分配的堆外内存)
server.undertow.direct-buffers=true

server.undertow.accesslog.enabled=true
server.undertow.accesslog.pattern=%t %a "%r" %s (%D ms)

# 生产环境通过启动参数“ -jar --spring.profiles.active=pro”修改
spring.profiles.active=dev

# 控制台彩色日志打印
spring.output.ansi.enabled=ALWAYS

# 指定页面模板
spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true

# 线程池配置
spring.task.executor.core-pool-size=50
spring.task.executor.max-pool-size=100
spring.task.executor.query-capacity=20

# 日志中打印的应用名
log.application.name=example-spring-boot-web
# 生产环境日志级别
log.pro.level=INFO
# 开发环境日志级别
log.dev.level=INFO
# 日志文件名
log.file.name=example-spring-boot
# 日志文件最大归档数
log.file.maxIndex=20
# 单个日志文件最大归档大小
log.file.maxFileSize=100MB